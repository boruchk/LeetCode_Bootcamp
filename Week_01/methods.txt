Two Pointer Approach:
one pointer at the start of list, one at the end.
1. swap list[start] <-> list[end].
2. start++, end--

usually used when tracking elements in different parts of a list
Most helpful when brute force would be O(n^2)

linear data -> tracking 2 positions -> comparing/swapping elements



Sliding Window Approach:
Move window accross data to inspect different segments efficiently

usually used for calculating max sums, finding longest substrings without repeating chars

contiguous data -> can do random access -> is computation const or grows very slowly
